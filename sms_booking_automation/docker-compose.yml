version: "3.8"
services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_HOST=${POSTGRES_HOST}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_sms_booking_automation:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  flyway:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - FLYWAY_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DATABASE}
      - FLYWAY_USER=${POSTGRES_USER}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - FLYWAY_BASELINE_ON_MIGRATE=true
      - FLYWAY_VALIDATE_ON_MIGRATE=true
      - FLYWAY_SCHEMAS=public
      - FLYWAY_CLEAN_DISABLED=true
    volumes:
      - ./app/db/migrations:/flyway/sql:ro
    command: migrate

  redis:
    image: redis:7.2
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

    ports:
      - "6379:6379"
    volumes:
      - redis_data_sms_booking_automation:/data
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--appendonly",
        "yes",
        "--maxmemory",
        "256mb",
        "--maxmemory-policy",
        "allkeys-lru",
      ]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_TARGET_CHAT_IDS=${TELEGRAM_TARGET_CHAT_IDS}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JUSTCALL_API_KEY=${JUSTCALL_API_KEY}
      - JUSTCALL_API_SECRET=${JUSTCALL_API_SECRET}
      - JUSTCALL_NUMBER=${JUSTCALL_NUMBER}
      - JUSTCALL_PHONE_ID=${JUSTCALL_PHONE_ID}
      - JUSTCALL_ESCALATION_TAG_ID=${JUSTCALL_ESCALATION_TAG_ID}
    ports:
      - "8080:8080"
    volumes:
      - ./app:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    volumes:
      - ./app:/app
    command: celery -A celery_app worker --concurrency=1 --loglevel=info --queues=gmail_queue,sms_queue,job_publishing_queue
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data_sms_booking_automation:
  redis_data_sms_booking_automation:
